# Translated from kfork.erl

interface Actor_mb {
  Packet()
}

interface Main_mb { }

def actor(mb0: Actor_mb?): (Unit * Actor_mb?) {
  actor_loop(mb0)
}

def actor_loop(mb1: Actor_mb?): (Unit * Actor_mb?) {
  guard mb1: *Packet {
    empty(mb4) ->
      ((), mb4)
    receive Packet() from mb2 ->
      let (v0, mb3) =
        ((), mb2)
      in
        actor_loop(mb3)
  }
}

def flood(num_messages: Int, actor: Actor_mb!): Unit {
  if (num_messages <= 0) {
    ()
  }
  else {
    let v1 =
      actor ! Packet()
    in
      flood(num_messages - 1, actor)
  }
}

def main(mb5: Main_mb?): (Unit * Main_mb?) {
  let (actor1, mb8) =
    (let mb6 =
  new [Actor_mb]
in
  let y =
    spawn {
      let (x, mb7) =
        actor(mb6)
      in
        free(mb7)
    }
  in
    mb6, mb5)
  in
    let (actor2, mb11) =
      (let mb9 =
  new [Actor_mb]
in
  let y =
    spawn {
      let (x, mb10) =
        actor(mb9)
      in
        free(mb10)
    }
  in
    mb9, mb8)
    in
      let (actor3, mb14) =
        (let mb12 =
  new [Actor_mb]
in
  let y =
    spawn {
      let (x, mb13) =
        actor(mb12)
      in
        free(mb13)
    }
  in
    mb12, mb11)
      in
        let (v2, mb15) =
          (flood(5, actor1), mb14)
        in
          let (v3, mb16) =
            (flood(10, actor2), mb15)
          in
            (flood(15, actor3), mb16)
}

def main'(): Unit {
  let mb17 =
    new [Main_mb]
  in
    let (x, mb18) =
      main(mb17)
    in
      let y =
        free(mb18)
      in
        x
}