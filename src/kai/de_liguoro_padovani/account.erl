%%%-------------------------------------------------------------------
%%% @author walker
%%% @copyright (C) 2024, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 30. 6æœˆ 2024 01:10
%%%-------------------------------------------------------------------
-module(account).
-author("walker").

-include("paterl.hrl").

-import(io, [format/2]).

%% API
-export([main/0]).

%% Internal exports
-export([account/1]).

%% Mailbox interface-function associations
-new({account_mb, [account/1]}).
-new({barrier_mb, [await/0]}).
-use({barrier_mb, [notify/1]}).
-new({main_mb, [main/0]}).

%% Barrier's message types
-type reply() :: {reply}.

%% Account's message types
-type debit() :: {debit, integer(), barrier_mb()}.
-type credit() :: {credit, integer(), account_mb(), barrier_mb()}.
-type stop() :: {stop}.

%%  interface Barrier {
%%    Reply()
%%  }
%%
%%  interface Account {
%%    Debit(Int, Barrier!),
%%    Credit(Int, Account!, Barrier!),
%%    Stop()
%%  }
-type barrier_mb() :: pid() | reply().
-type account_mb() :: pid() | debit() | credit() | stop().
-type main_mb() :: pid().

%% def notify(barrier: Barrier!): Unit {
%%   barrier ! Reply()
%% }
-spec notify(barrier_mb()) -> no_return().
notify(Barrier) ->
  Barrier ! {reply}.

%% def await(barrier: Barrier?): Unit {
%%   guard barrier : Reply {
%%     receive Reply() from barrier ->
%%         free(barrier)
%%   }
%% }
-spec await() -> no_return().
await() ->
  ?mb_assert_regex("Reply"),
  receive
    {reply} ->
%%      TODO: Not sure about free
      ok
  end.
%% Generated by paterl
%% def await(mb1: Barrier_mb?): (Unit * Barrier_mb?) {
%%  let (v0, mb3) =
%%    guard mb1: Reply {
%%      receive Reply() from mb2 ->
%%        (free, mb2)
%%    }
%%  in
%%  (v0, mb3)
%% }

%% def account(self: Account?, balance: Int): Unit {
%%   guard self : ((*Debit) . (*Credit))  {
%%     free -> ()
%%     receive Debit(amount, ack) from self ->
%%         notify(ack);
%%         account(self, balance - amount)
%%     receive Credit(amount, payer, ack) from self ->
%%         let barrier = new[Barrier] in
%%         payer ! Debit(amount, barrier);
%%         await(barrier);
%%         notify(ack);
%%         account(self, balance + amount)
%%   }
%% }
-spec account(integer()) -> no_return().
account(Balance) ->
  ?mb_assert_regex("((*Debit) . (*Credit))"),
  receive
    {debit, Amount, Ack} ->
      notify(Ack),
      account(Balance - Amount);
    {credit, Amount, Payer, Ack} ->
%%    TODO: Not sure about new mailbox
      Self = self(),
      Payer ! {debit, Amount, Self},
      await(),
      notify(Ack),
      account(Balance + Amount)
  end.

%% def main(): Unit {
%%   # Alice
%%   let alice = new[Account] in
%%   spawn { account(alice, 10) };
%%   # Bob
%%   let bob = new[Account] in
%%   spawn { account(bob, 15) };
%%   ### Ack
%%   let barrier = new[Barrier] in
%%   ####
%%   alice ! Credit(10, bob, barrier);
%%   await(barrier)
%% }
-spec main() -> no_return().
main() ->
  ?mb_new(account_mb),
  Alice = spawn(?MODULE, account, [10]),
  ?mb_new(account_mb),
  Bob = spawn(?MODULE, account, [15]),

  Self = self(),
  Alice ! {credit, 10, Bob, Self},
  await().
