# Translated from philosopher.erl

interface Philosopher_mb {
  Start(),
  Denied(),
  Eat()
}

interface Arbiter_mb {
  Hungry(Philosopher_mb!, Int),
  Done(Int),
  Exit()
}

interface Main_mb { }

def philosopher(mb0: Philosopher_mb?, id: Int, numrounds: Int, arbiter: Arbiter_mb!): (Unit * Philosopher_mb?) {
  guard mb0: Start {
    receive Start() from mb1 ->
      philosopher_loop(mb1, id, numrounds, arbiter)
  }
}

def philosopher_loop(mb2: Philosopher_mb?, id: Int, numrounds: Int, arbiter: Arbiter_mb!): (Unit * Philosopher_mb?) {
  let (self, mb3) =
    (mb2, mb2)
  in
    let (v0, mb4) =
      (arbiter ! Hungry(self, id), mb3)
    in
      guard mb4: Denied + Eat + 1 {
        empty(mb8) ->
          ((), mb8)
        receive Denied() from mb5 ->
          philosopher_loop(mb5, id, numrounds, arbiter)
        receive Eat() from mb6 ->
          let (v1, mb7) =
            (arbiter ! Done(id), mb6)
          in
            if (numrounds <= 0) {
              (arbiter ! Exit(), mb7)
            }
            else {
              philosopher_loop(mb7, id, numrounds - 1, arbiter)
            }
      }
}

def arbiter(mb9: Arbiter_mb?, numexitedphilosophers: Int, fork1: Bool, fork2: Bool): (Unit * Arbiter_mb?) {
  arbiter_loop(mb9, numexitedphilosophers, fork1, fork2)
}

def arbiter_loop(mb10: Arbiter_mb?, numexitedphilosophers: Int, fork1: Bool, fork2: Bool): (Unit * Arbiter_mb?) {
  guard mb10: *(Hungry + Done + Exit) {
    empty(mb19) ->
      ((), mb19)
    receive Hungry(philosopher, philosopherid) from mb11 ->
      let (available, mb12) =
        (forks_available(philosopherid, fork1, fork2), mb11)
      in
        if (available) {
          let (v2, mb13) =
            (philosopher ! Eat(), mb12)
          in
            let (v3, mb14) =
              (allocate_forks(philosopherid, fork1, fork2), mb13)
            in
              arbiter_loop(mb14, numexitedphilosophers, fork1, fork2)
        }
        else {
          let (v4, mb15) =
            (philosopher ! Denied(), mb12)
          in
            arbiter_loop(mb15, numexitedphilosophers, fork1, fork2)
        }
    receive Done(philosopherid) from mb16 ->
      let (v5, mb17) =
        (deallocate_forks(philosopherid, fork1, fork2), mb16)
      in
        arbiter_loop(mb17, numexitedphilosophers, fork1, fork2)
    receive Exit() from mb18 ->
      if (numexitedphilosophers <= 0) {
        arbiter_exit(mb18)
      }
      else {
        arbiter_loop(mb18, numexitedphilosophers - 1, fork1, fork2)
      }
  }
}

def forks_available(id: Int, fork1: Bool, fork2: Bool): Bool {
  true
}

def allocate_forks(id: Int, fork1: Bool, fork2: Bool): Unit {
  ()
}

def deallocate_forks(id: Int, fork1: Bool, fork2: Bool): Unit {
  ()
}

def arbiter_exit(mb20: Arbiter_mb?): (Unit * Arbiter_mb?) {
  guard mb20: *(Hungry + Done + Exit) {
    empty(mb24) ->
      ((), mb24)
    receive Hungry(philosopher, philosopherid) from mb21 ->
      arbiter_exit(mb21)
    receive Done(id) from mb22 ->
      arbiter_exit(mb22)
    receive Exit() from mb23 ->
      arbiter_exit(mb23)
  }
}

def main(mb25: Main_mb?): (Unit * Main_mb?) {
  let (numrounds, mb26) =
    (5, mb25)
  in
    let (arbiter, mb29) =
      (let mb27 =
  new [Arbiter_mb]
in
  let y =
    spawn {
      let (x, mb28) =
        arbiter(mb27, 2, false, false)
      in
        free(mb28)
    }
  in
    mb27, mb26)
    in
      let (philosopher1, mb32) =
        (let mb30 =
  new [Philosopher_mb]
in
  let y =
    spawn {
      let (x, mb31) =
        philosopher(mb30, 0, numrounds, arbiter)
      in
        free(mb31)
    }
  in
    mb30, mb29)
      in
        let (v6, mb33) =
          (philosopher1 ! Start(), mb32)
        in
          let (philosopher2, mb36) =
            (let mb34 =
  new [Philosopher_mb]
in
  let y =
    spawn {
      let (x, mb35) =
        philosopher(mb34, 1, numrounds, arbiter)
      in
        free(mb35)
    }
  in
    mb34, mb33)
          in
            (philosopher2 ! Start(), mb36)
}

def main'(): Unit {
  let mb37 =
    new [Main_mb]
  in
    let (x, mb38) =
      main(mb37)
    in
      let y =
        free(mb38)
      in
        x
}