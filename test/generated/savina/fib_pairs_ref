# Translated from fib_pairs.erl

interface Fib_actor_mb {
  Request(Int, Fib_actor_mb!),
  Response(Int)
}

def fib_actor(mb0: Fib_actor_mb?): (Unit * Fib_actor_mb?) {
  guard mb0: Request {
    receive Request(n, parent) from mb1 ->
      if (n <= 2) {
        (parent ! Response(1), mb1)
      }
      else {
        let (self, mb2) =
          (mb1, mb1)
        in
          let (child1, mb5) =
            (let mb3 =
  new [Fib_actor_mb]
in
  let y =
    spawn {
      let (x, mb4) =
        fib_actor(mb3)
      in
        free(mb4)
    }
  in
    mb3, mb2)
          in
            let (v0, mb6) =
              (child1 ! Request(n - 1, self), mb5)
            in
              let (child2, mb9) =
                (let mb7 =
  new [Fib_actor_mb]
in
  let y =
    spawn {
      let (x, mb8) =
        fib_actor(mb7)
      in
        free(mb8)
    }
  in
    mb7, mb6)
              in
                let (v1, mb10) =
                  (child2 ! Request(n - 2, self), mb9)
                in
                  let (term1, mb12) =
                    guard mb10: Response.Response {
                      receive Response(x1) from mb11 ->
                        (x1, mb11)
                    }
                  in
                    let (term2, mb14) =
                      guard mb12: Response {
                        receive Response(x2) from mb13 ->
                          (x2, mb13)
                      }
                    in
                      (parent ! Response(term1 + term2), mb14)
      }
  }
}

def main(mb15: Fib_actor_mb?): (Unit * Fib_actor_mb?) {
  let (self, mb16) =
    (mb15, mb15)
  in
    let (first_actor, mb19) =
      (let mb17 =
  new [Fib_actor_mb]
in
  let y =
    spawn {
      let (x, mb18) =
        fib_actor(mb17)
      in
        free(mb18)
    }
  in
    mb17, mb16)
    in
      let (v2, mb20) =
        (first_actor ! Request(16, self), mb19)
      in
        guard mb20: Response {
          receive Response(x) from mb21 ->
            ((), mb21)
        }
}

def main'(): Unit {
  let mb22 =
    new [Fib_actor_mb]
  in
    let (x, mb23) =
      main(mb22)
    in
      let y =
        free(mb23)
      in
        x
}