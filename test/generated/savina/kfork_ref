# Translated from kfork.erl

interface Actor_mb {
  Packet()
}

interface Main_mb { }

def actor(mb0: Actor_mb?): (Unit * Actor_mb?) {
  actor_loop(mb0)
}

def actor_loop(mb1: Actor_mb?): (Unit * Actor_mb?) {
  guard mb1: *Packet {
    empty(mb5) ->
      ((), mb5)
    receive Packet() from mb2 ->
      let (self, mb3) =
        (mb2, mb2)
      in
        let (v0, mb4) =
          ((), mb3)
        in
          actor_loop(mb4)
  }
}

def flood(num_messages: Int, actor: Actor_mb!): Unit {
  if (num_messages <= 0) {
    ()
  }
  else {
    let v1 =
      actor ! Packet()
    in
      flood(num_messages - 1, actor)
  }
}

def main(mb6: Main_mb?): (Unit * Main_mb?) {
  let (actor1, mb9) =
    (let mb7 =
  new [Actor_mb]
in
  let y =
    spawn {
      let (x, mb8) =
        actor(mb7)
      in
        free(mb8)
    }
  in
    mb7, mb6)
  in
    let (actor2, mb12) =
      (let mb10 =
  new [Actor_mb]
in
  let y =
    spawn {
      let (x, mb11) =
        actor(mb10)
      in
        free(mb11)
    }
  in
    mb10, mb9)
    in
      let (actor3, mb15) =
        (let mb13 =
  new [Actor_mb]
in
  let y =
    spawn {
      let (x, mb14) =
        actor(mb13)
      in
        free(mb14)
    }
  in
    mb13, mb12)
      in
        let (v2, mb16) =
          (flood(5, actor1), mb15)
        in
          let (v3, mb17) =
            (flood(10, actor2), mb16)
          in
            (flood(15, actor3), mb17)
}

def main'(): Unit {
  let mb18 =
    new [Main_mb]
  in
    let (x, mb19) =
      main(mb18)
    in
      let y =
        free(mb19)
      in
        x
}