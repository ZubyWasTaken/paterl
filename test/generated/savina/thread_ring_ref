# Translated from thread_ring.erl

interface Actor_mb {
  Data(Actor_mb!),
  Ping(Int),
  Exit(Int)
}

def actor(mb0: Actor_mb?, numactors: Int): (Unit * Actor_mb?) {
  guard mb0: Data . *Ping . *Exit {
    receive Data(neighbor) from mb1 ->
      actor_loop(mb1, numactors, neighbor)
  }
}

def actor_loop(mb2: Actor_mb?, numactors: Int, neighbor: Actor_mb!): (Unit * Actor_mb?) {
  guard mb2: *Ping . *Exit {
    empty(mb10) ->
      ((), mb10)
    receive Ping(pingsleft) from mb3 ->
      if (pingsleft <= 0) {
        let (v0, mb4) =
          (neighbor ! Exit(numactors), mb3)
        in
          actor_exit(mb4)
      }
      else {
        let (self, mb5) =
          (mb3, mb3)
        in
          let (v1, mb6) =
            ((), mb5)
          in
            let (v2, mb7) =
              (neighbor ! Ping(pingsleft - 1), mb6)
            in
              actor_loop(mb7, numactors, neighbor)
      }
    receive Exit(exitsleft) from mb8 ->
      let (v3, mb9) =
        if (exitsleft <= 0) {
          ((), mb8)
        }
        else {
          (neighbor ! Ping(exitsleft - 1), mb8)
        }
      in
        actor_exit(mb9)
  }
}

def actor_exit(mb11: Actor_mb?): (Unit * Actor_mb?) {
  guard mb11: *Ping . *Exit {
    empty(mb14) ->
      ((), mb14)
    receive Ping(pingsleft) from mb12 ->
      actor_exit(mb12)
    receive Exit(exitsleft) from mb13 ->
      actor_exit(mb13)
  }
}

def init_ring(numactors: Int, main: Actor_mb!): Unit {
  if (numactors < 2) {
    ()
  }
  else {
    let firstactor =
      let mb15 =
        new [Actor_mb]
      in
        let y =
          spawn {
            let (x, mb16) =
              actor(mb15, numactors)
            in
              free(mb16)
          }
        in
          mb15
    in
      let tailactor =
        create_actors(numactors - 2, numactors, firstactor)
      in
        let v4 =
          tailactor ! Data(firstactor)
        in
          main ! Data(firstactor)
  }
}

def create_actors(count: Int, numactors: Int, prevactor: Actor_mb!): Actor_mb! {
  let actor =
    let mb17 =
      new [Actor_mb]
    in
      let y =
        spawn {
          let (x, mb18) =
            actor(mb17, numactors)
          in
            free(mb18)
        }
      in
        mb17
  in
    let v5 =
      prevactor ! Data(actor)
    in
      if (count < 0) {
        actor
      }
      else {
        create_actors(count - 1, numactors, actor)
      }
}

def main(mb19: Actor_mb?): (Unit * Actor_mb?) {
  let (numactors, mb20) =
    (5, mb19)
  in
    let (numrounds, mb21) =
      (5, mb20)
    in
      let (self, mb22) =
        (mb21, mb21)
      in
        let (v6, mb23) =
          (init_ring(numactors, self), mb22)
        in
          guard mb23: Data + 1 {
            empty(mb25) ->
              ((), mb25)
            receive Data(first_actor) from mb24 ->
              (first_actor ! Ping(numrounds), mb24)
          }
}

def main'(): Unit {
  let mb26 =
    new [Actor_mb]
  in
    let (x, mb27) =
      main(mb26)
    in
      let y =
        free(mb27)
      in
        x
}